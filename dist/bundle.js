(()=>{"use strict";class e{constructor(){}get totalScore(){return n.getInstance().activeElementsScore.reduce(((e,t)=>e+t),0)}render(){document.querySelector(".score__number").textContent=String(this.totalScore)}static getInstance(){return e.instance||(e.instance=new e),e.instance}}class t{constructor(e){this.element=e,e.addEventListener("click",this.clickEventHandler.bind(this))}clickEventHandler(){this.element.classList.toggle("food--active"),e.getInstance().render()}}class n{constructor(){this.elements=document.querySelectorAll(".food"),this._activeElements=[],this._activeElementsScore=[],this.elements.forEach((e=>{new t(e)}))}get activeElements(){return this._activeElements=[],this.elements.forEach((e=>{e.classList.contains("food--active")&&this._activeElements.push(e)})),this._activeElements}get activeElementsScore(){return this._activeElementsScore=[],this.activeElements.forEach((e=>{const t=e.querySelector(".food__score");t&&this._activeElementsScore.push(Number(t.textContent))})),this._activeElementsScore}static getInstance(){return n.instance||(n.instance=new n),n.instance}}n.getInstance()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90eXBlc2NyaXB0LWxlc3Nvbi8uL3NyYy9mb29kLWFwcC9zY29yZS50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0LWxlc3Nvbi8uL3NyYy9mb29kLWFwcC9mb29kLnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQtbGVzc29uLy4vc3JjL2Zvb2QtYXBwL2Zvb2RzLnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQtbGVzc29uLy4vc3JjL2Zvb2QtYXBwL21haW4udHMiXSwibmFtZXMiOlsiU2NvcmUiLCJGb29kcyIsImdldEluc3RhbmNlIiwiYWN0aXZlRWxlbWVudHNTY29yZSIsInJlZHVjZSIsInRvdGFsIiwic2NvcmUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0Q29udGVudCIsIlN0cmluZyIsInRoaXMiLCJ0b3RhbFNjb3JlIiwiaW5zdGFuY2UiLCJGb29kIiwiZWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGlja0V2ZW50SGFuZGxlciIsImJpbmQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJyZW5kZXIiLCJlbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfYWN0aXZlRWxlbWVudHMiLCJfYWN0aXZlRWxlbWVudHNTY29yZSIsImZvckVhY2giLCJjb250YWlucyIsInB1c2giLCJhY3RpdmVFbGVtZW50cyIsImZvb2RTY29yZSIsIk51bWJlciJdLCJtYXBwaW5ncyI6Im1CQUNPLE1BQU1BLEVBQ1QsZUFDQSxpQkFFSSxPQURjQyxFQUFNQyxjQUNQQyxvQkFBb0JDLFFBQU8sQ0FBQ0MsRUFBT0MsSUFBVUQsRUFBUUMsR0FBTyxHQUU3RSxTQUNJQyxTQUFTQyxjQUFjLGtCQUFrQkMsWUFBY0MsT0FBT0MsS0FBS0MsWUFFdkUscUJBSUksT0FIS1osRUFBTWEsV0FDUGIsRUFBTWEsU0FBVyxJQUFJYixHQUVsQkEsRUFBTWEsVUNiZCxNQUFNQyxFQUNULFlBQVlDLEdBQ1JKLEtBQUtJLFFBQVVBLEVBQ2ZBLEVBQVFDLGlCQUFpQixRQUFTTCxLQUFLTSxrQkFBa0JDLEtBQUtQLE9BRWxFLG9CQUNJQSxLQUFLSSxRQUFRSSxVQUFVQyxPQUFPLGdCQUNoQnBCLEVBQU1FLGNBQ2RtQixVQ1JQLE1BQU1wQixFQUNULGNBQ0lVLEtBQUtXLFNBQVdmLFNBQVNnQixpQkFBaUIsU0FDMUNaLEtBQUthLGdCQUFrQixHQUN2QmIsS0FBS2MscUJBQXVCLEdBQzVCZCxLQUFLVyxTQUFTSSxTQUFRWCxJQUNsQixJQUFJRCxFQUFLQyxNQUdqQixxQkFPSSxPQU5BSixLQUFLYSxnQkFBa0IsR0FDdkJiLEtBQUtXLFNBQVNJLFNBQVFYLElBQ2RBLEVBQVFJLFVBQVVRLFNBQVMsaUJBQzNCaEIsS0FBS2EsZ0JBQWdCSSxLQUFLYixNQUczQkosS0FBS2EsZ0JBRWhCLDBCQVFJLE9BUEFiLEtBQUtjLHFCQUF1QixHQUM1QmQsS0FBS2tCLGVBQWVILFNBQVFYLElBQ3hCLE1BQU1lLEVBQVlmLEVBQVFQLGNBQWMsZ0JBQ3BDc0IsR0FDQW5CLEtBQUtjLHFCQUFxQkcsS0FBS0csT0FBT0QsRUFBVXJCLGlCQUdqREUsS0FBS2MscUJBRWhCLHFCQUlJLE9BSEt4QixFQUFNWSxXQUNQWixFQUFNWSxTQUFXLElBQUlaLEdBRWxCQSxFQUFNWSxVQ2hDckJaLEVBQU1DLGUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9vZHMgfSBmcm9tICcuL2Zvb2RzJztcbmV4cG9ydCBjbGFzcyBTY29yZSB7XG4gICAgY29uc3RydWN0b3IoKSB7IH1cbiAgICBnZXQgdG90YWxTY29yZSgpIHtcbiAgICAgICAgY29uc3QgZm9vZHMgPSBGb29kcy5nZXRJbnN0YW5jZSgpO1xuICAgICAgICByZXR1cm4gZm9vZHMuYWN0aXZlRWxlbWVudHNTY29yZS5yZWR1Y2UoKHRvdGFsLCBzY29yZSkgPT4gdG90YWwgKyBzY29yZSwgMCk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjb3JlX19udW1iZXInKS50ZXh0Q29udGVudCA9IFN0cmluZyh0aGlzLnRvdGFsU2NvcmUpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgIGlmICghU2NvcmUuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIFNjb3JlLmluc3RhbmNlID0gbmV3IFNjb3JlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNjb3JlLmluc3RhbmNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNjb3JlIH0gZnJvbSAnLi9zY29yZSc7XG5leHBvcnQgY2xhc3MgRm9vZCB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0V2ZW50SGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgY2xpY2tFdmVudEhhbmRsZXIoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdmb29kLS1hY3RpdmUnKTtcbiAgICAgICAgY29uc3Qgc2NvcmUgPSBTY29yZS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBzY29yZS5yZW5kZXIoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGb29kIH0gZnJvbSAnLi9mb29kJztcbmV4cG9ydCBjbGFzcyBGb29kcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9vZCcpO1xuICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50cyA9IFtdO1xuICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50c1Njb3JlID0gW107XG4gICAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIG5ldyBGb29kKGVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGFjdGl2ZUVsZW1lbnRzKCkge1xuICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50cyA9IFtdO1xuICAgICAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Zvb2QtLWFjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVFbGVtZW50cztcbiAgICB9XG4gICAgZ2V0IGFjdGl2ZUVsZW1lbnRzU2NvcmUoKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnRzU2NvcmUgPSBbXTtcbiAgICAgICAgdGhpcy5hY3RpdmVFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgY29uc3QgZm9vZFNjb3JlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZm9vZF9fc2NvcmUnKTtcbiAgICAgICAgICAgIGlmIChmb29kU2NvcmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50c1Njb3JlLnB1c2goTnVtYmVyKGZvb2RTY29yZS50ZXh0Q29udGVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUVsZW1lbnRzU2NvcmU7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgaWYgKCFGb29kcy5pbnN0YW5jZSkge1xuICAgICAgICAgICAgRm9vZHMuaW5zdGFuY2UgPSBuZXcgRm9vZHMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRm9vZHMuaW5zdGFuY2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRm9vZHMgfSBmcm9tICcuL2Zvb2RzJztcbkZvb2RzLmdldEluc3RhbmNlKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9